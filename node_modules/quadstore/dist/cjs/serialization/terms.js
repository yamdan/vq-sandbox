"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.termReader = exports.termWriter = exports.defaultGraphReader = exports.defaultGraphWriter = exports.numericLiteralReader = exports.numericLiteralWriter = exports.langStringLiteralReader = exports.langStringLiteralWriter = exports.stringLiteralReader = exports.stringLiteralWriter = exports.genericLiteralReader = exports.genericLiteralWriter = exports.blankNodeReader = exports.blankNodeWriter = exports.namedNodeReader = exports.namedNodeWriter = void 0;
const xsd = __importStar(require("./xsd"));
const utils_1 = require("./utils");
const constants_1 = require("../utils/constants");
const fpstring_1 = require("./fpstring");
exports.namedNodeWriter = {
    writtenValueLength: 1,
    write(value, valueOffset, node, prefixes) {
        const compactedIri = prefixes.compactIri(node.value);
        if (value) {
            value[valueOffset] = compactedIri.length;
        }
        return compactedIri;
    },
};
exports.namedNodeReader = {
    readValueLength: 1,
    readKeyChars: 0,
    read(key, keyOffset, value, valueOffset, factory, prefixes) {
        const valueLen = value[valueOffset];
        this.readKeyChars = valueLen;
        return factory.namedNode(prefixes.expandTerm((0, utils_1.sliceString)(key, keyOffset, valueLen)));
    },
};
exports.blankNodeWriter = {
    writtenValueLength: 1,
    write(value, valueOffset, node) {
        if (value) {
            value[valueOffset] = node.value.length;
        }
        return node.value;
    },
};
exports.blankNodeReader = {
    readValueLength: 1,
    readKeyChars: 0,
    read(key, keyOffset, value, valueOffset, factory) {
        const valueLen = value[valueOffset];
        this.readKeyChars = valueLen;
        return factory.blankNode((0, utils_1.sliceString)(key, keyOffset, valueLen));
    },
};
exports.genericLiteralWriter = {
    writtenValueLength: 2,
    write(value, valueOffset, node, separator) {
        if (value) {
            value[valueOffset] = node.value.length;
            value[valueOffset + 1] = node.datatype.value.length;
        }
        return node.datatype.value + separator + node.value;
    },
};
exports.genericLiteralReader = {
    readValueLength: 2,
    readKeyChars: 0,
    read(key, keyOffset, value, valueOffset, factory, separator) {
        const valueLen = value[valueOffset];
        const datatypeValueLen = value[valueOffset + 1];
        this.readKeyChars = valueLen + datatypeValueLen + separator.length;
        return factory.literal((0, utils_1.sliceString)(key, keyOffset + datatypeValueLen + separator.length, valueLen), factory.namedNode((0, utils_1.sliceString)(key, keyOffset, datatypeValueLen)));
    },
};
exports.stringLiteralWriter = {
    writtenValueLength: 1,
    write(value, valueOffset, node) {
        if (value) {
            value[valueOffset] = node.value.length;
        }
        return node.value;
    },
};
exports.stringLiteralReader = {
    readValueLength: 1,
    readKeyChars: 0,
    read(key, keyOffset, value, valueOffset, factory) {
        const valueLen = value[valueOffset];
        this.readKeyChars = valueLen;
        return factory.literal((0, utils_1.sliceString)(key, keyOffset, valueLen));
    },
};
exports.langStringLiteralWriter = {
    writtenValueLength: 2,
    write(value, valueOffset, node, separator) {
        if (value) {
            value[valueOffset] = node.value.length;
            value[valueOffset + 1] = node.language.length;
        }
        return node.language + separator + node.value;
    },
};
exports.langStringLiteralReader = {
    readValueLength: 2,
    readKeyChars: 0,
    read(key, keyOffset, value, valueOffset, factory, separator) {
        const valueLen = value[valueOffset];
        const langCodeLen = value[valueOffset + 1];
        this.readKeyChars = valueLen + langCodeLen + separator.length;
        return factory.literal((0, utils_1.sliceString)(key, keyOffset + langCodeLen + separator.length, valueLen), (0, utils_1.sliceString)(key, keyOffset, langCodeLen));
    },
};
exports.numericLiteralWriter = {
    writtenValueLength: 3,
    write(value, valueOffset, node, separator, encodedNumericValue, rangeMode) {
        if (value) {
            value[valueOffset] = node.value.length;
            value[valueOffset + 1] = node.datatype.value.length;
            value[valueOffset + 2] = encodedNumericValue.length;
        }
        let ret = encodedNumericValue;
        if (!rangeMode) {
            ret += separator + node.datatype.value + separator + node.value;
        }
        return ret;
    },
};
exports.numericLiteralReader = {
    readValueLength: 3,
    readKeyChars: 0,
    read(key, keyOffset, value, valueOffset, factory, separator) {
        const valueLen = value[valueOffset];
        const datatypeValueLen = value[valueOffset + 1];
        const numericValueLen = value[valueOffset + 2];
        this.readKeyChars = numericValueLen + datatypeValueLen + valueLen + (separator.length * 2);
        return factory.literal((0, utils_1.sliceString)(key, keyOffset + numericValueLen + separator.length + datatypeValueLen + separator.length, valueLen), factory.namedNode((0, utils_1.sliceString)(key, keyOffset + numericValueLen + separator.length, datatypeValueLen)));
    },
};
exports.defaultGraphWriter = {
    writtenValueLength: 1,
    write(value, valueOffset, node) {
        if (value) {
            value[valueOffset] = 2;
        }
        return 'dg';
    },
};
exports.defaultGraphReader = {
    readValueLength: 1,
    readKeyChars: 2,
    read(key, keyOffset, value, valueOffset, factory) {
        return factory.defaultGraph();
    },
};
exports.termWriter = {
    writtenValueLength: 0,
    write(value, baseValueOffset, term, prefixes) {
        let ret = '';
        let valueOffset = baseValueOffset;
        switch (term.termType) {
            case 'NamedNode':
                if (value) {
                    value[valueOffset] = 0;
                }
                valueOffset += 1;
                ret += exports.namedNodeWriter.write(value, valueOffset, term, prefixes);
                valueOffset += exports.namedNodeWriter.writtenValueLength;
                break;
            case 'BlankNode':
                if (value) {
                    value[valueOffset] = 1;
                }
                valueOffset += 1;
                ret += exports.blankNodeWriter.write(value, valueOffset, term);
                valueOffset += exports.blankNodeWriter.writtenValueLength;
                break;
            case 'DefaultGraph':
                if (value) {
                    value[valueOffset] = 6;
                }
                valueOffset += 1;
                ret += exports.defaultGraphWriter.write(value, valueOffset, term);
                valueOffset += exports.defaultGraphWriter.writtenValueLength;
                break;
            case 'Literal':
                if (term.language) {
                    if (value) {
                        value[valueOffset] = 4;
                    }
                    valueOffset += 1;
                    ret += exports.langStringLiteralWriter.write(value, valueOffset, term, constants_1.separator);
                    valueOffset += exports.langStringLiteralWriter.writtenValueLength;
                }
                else if (term.datatype) {
                    switch (term.datatype.value) {
                        case xsd.string:
                            if (value) {
                                value[valueOffset] = 3;
                            }
                            valueOffset += 1;
                            ret += exports.stringLiteralWriter.write(value, valueOffset, term);
                            valueOffset += exports.stringLiteralWriter.writtenValueLength;
                            break;
                        case xsd.integer:
                        case xsd.double:
                        case xsd.decimal:
                        case xsd.nonPositiveInteger:
                        case xsd.negativeInteger:
                        case xsd.long:
                        case xsd.int:
                        case xsd.short:
                        case xsd.byte:
                        case xsd.nonNegativeInteger:
                        case xsd.unsignedLong:
                        case xsd.unsignedInt:
                        case xsd.unsignedShort:
                        case xsd.unsignedByte:
                        case xsd.positiveInteger:
                            if (value) {
                                value[valueOffset] = 5;
                            }
                            valueOffset += 1;
                            ret += exports.numericLiteralWriter.write(value, valueOffset, term, constants_1.separator, (0, fpstring_1.encode)(term.value), false);
                            valueOffset += exports.numericLiteralWriter.writtenValueLength;
                            break;
                        case xsd.dateTime:
                            if (value) {
                                value[valueOffset] = 5;
                            }
                            valueOffset += 1;
                            ret += exports.numericLiteralWriter.write(value, valueOffset, term, constants_1.separator, (0, fpstring_1.encode)(new Date(term.value).valueOf()), false);
                            valueOffset += exports.numericLiteralWriter.writtenValueLength;
                            break;
                        default:
                            if (value) {
                                value[valueOffset] = 2;
                            }
                            valueOffset += 1;
                            ret += exports.genericLiteralWriter.write(value, valueOffset, term, constants_1.separator);
                            valueOffset += exports.genericLiteralWriter.writtenValueLength;
                    }
                }
                else {
                    if (value) {
                        value[valueOffset] = 3;
                    }
                    valueOffset += 1;
                    ret += exports.stringLiteralWriter.write(value, valueOffset, term);
                    valueOffset += exports.stringLiteralWriter.writtenValueLength;
                }
        }
        this.writtenValueLength = valueOffset - baseValueOffset;
        return ret;
    }
};
exports.termReader = {
    readKeyChars: 0,
    readValueLength: 0,
    read(key, baseKeyOffset, value, baseValueOffset, factory, prefixes) {
        let keyOffset = baseKeyOffset;
        let valueOffset = baseValueOffset;
        let termValue;
        const encodedTermType = value[valueOffset];
        valueOffset += 1;
        switch (encodedTermType) {
            case 0:
                termValue = exports.namedNodeReader.read(key, keyOffset, value, valueOffset, factory, prefixes);
                keyOffset += exports.namedNodeReader.readKeyChars;
                valueOffset += exports.namedNodeReader.readValueLength;
                break;
            case 1:
                termValue = exports.blankNodeReader.read(key, keyOffset, value, valueOffset, factory);
                keyOffset += exports.blankNodeReader.readKeyChars;
                valueOffset += exports.blankNodeReader.readValueLength;
                break;
            case 2:
                termValue = exports.genericLiteralReader.read(key, keyOffset, value, valueOffset, factory, constants_1.separator);
                keyOffset += exports.genericLiteralReader.readKeyChars;
                valueOffset += exports.genericLiteralReader.readValueLength;
                break;
            case 3:
                termValue = exports.stringLiteralReader.read(key, keyOffset, value, valueOffset, factory);
                keyOffset += exports.stringLiteralReader.readKeyChars;
                valueOffset += exports.stringLiteralReader.readValueLength;
                break;
            case 4:
                termValue = exports.langStringLiteralReader.read(key, keyOffset, value, valueOffset, factory, constants_1.separator);
                keyOffset += exports.langStringLiteralReader.readKeyChars;
                valueOffset += exports.langStringLiteralReader.readValueLength;
                break;
            case 5:
                termValue = exports.numericLiteralReader.read(key, keyOffset, value, valueOffset, factory, constants_1.separator);
                keyOffset += exports.numericLiteralReader.readKeyChars;
                valueOffset += exports.numericLiteralReader.readValueLength;
                break;
            case 6:
                termValue = exports.defaultGraphReader.read(key, keyOffset, value, valueOffset, factory);
                keyOffset += exports.defaultGraphReader.readKeyChars;
                valueOffset += exports.defaultGraphReader.readValueLength;
                break;
            default: throw new Error(`Unexpected encoded term type "${encodedTermType}"`);
        }
        this.readKeyChars = keyOffset - baseKeyOffset;
        this.readValueLength = valueOffset - baseValueOffset;
        return termValue;
    }
};
//# sourceMappingURL=terms.js.map